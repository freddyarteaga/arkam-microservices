services:
  postgres:
    container_name: postgres
    image: postgres:14
    mem_limit: 700m
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: sasa
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
      - ./init-multi-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - backend
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    mem_limit: 700m
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - backend
    restart: unless-stopped

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.2.5
    mem_limit: 700m
    ports:
      - "8443:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
    command: [ "start-dev" ]
    networks:
      - backend

  mongo:
    image: mongodb/mongodb-community-server:latest
    container_name: mongo
    mem_limit: 700m
    ports:
      - "27017:27017"
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - backend

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"   # RabbitMQ Message Broker
      - "15672:15672" # RabbitMQ Management UI (http://localhost:15672)
    networks:
      - backend
    restart: unless-stopped


  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - 9411:9411
    networks:
      - backend

  config-server:
    #    build: ../../configserver
    image: arkam/config-server
    container_name: config-server
    ports:
      - 8888:8888
    networks:
      - backend
    environment:
      - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=/config
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    volumes:
      - ./../../configserver/src/main/resources/config:/config
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  eureka:
    #    build: ../../eureka
    image: arkam/eureka-server
    container_name: eureka
    ports:
      - 8761:8761
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  gateway-service:
    #    build: ../../gateway
    image: arkam/gateway
    container_name: gateway
    mem_limit: 700m
    ports:
      - 8080:8080
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - rabbitmq
      - eureka
      - keycloak
      - config-server
    networks:
      - backend
    restart: on-failure

  user-service:
    #    build: ../../user
    image: arkam/user-service
    container_name: user-service
    mem_limit: 700m
    ports:
      - 8082:8082
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MONGO_URI=${MONGO_URI}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    depends_on:
      - mongo
      - rabbitmq
      - eureka
      - keycloak
      - config-server
    networks:
      - backend
    restart: on-failure

  product-service:
    #    build: ../../product
    image: arkam/product-service
    container_name: product-service
    #    mem_limit: 700m
    ports:
      - 8081:8081
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    depends_on:
      - mongo
      - rabbitmq
      - eureka
      - keycloak
      - config-server
    networks:
      - backend
    restart: on-failure

  order-service:
    #    build: ../../order
    image: arkam/order-service
    container_name: order-service
    #    mem_limit: 700m
    ports:
      - 8083:8083
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    depends_on:
      - mongo
      - rabbitmq
      - eureka
      - keycloak
      - config-server
    networks:
      - backend
    restart: on-failure

  notification-service:
    #    build: ../../order
    image: arkam/notification-service
    container_name: notification-service
    #    mem_limit: 700m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - rabbitmq
      - eureka
      - keycloak
      - config-server
    networks:
      - backend
    restart: on-failure

networks:
  backend:
    driver: bridge

volumes:
  postgres:
  pgadmin: