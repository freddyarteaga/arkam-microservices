name: Deploy Product Service to AWS with JIB

on:
  push:
    branches:
      - main # O la rama que uses como principal
  workflow_dispatch: # Permite ejecutarlo manualmente

env:
  AWS_REGION: us-east-1 # Cambia esto a tu región de AWS
  ECS_CLUSTER_NAME: arkam-cluster # El nombre de tu cluster ECS
  ECS_SERVICE_NAME: product-service-svc # El nombre de tu servicio ECS
  ECS_TASK_DEFINITION_NAME: product-service-task # El nombre de tu task definition
  CONTAINER_NAME: product-service-container # El nombre del contenedor en la task definition
  IMAGE_REPO: product # El nombre de tu artefacto/imagen

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and Push Docker Image with Jib
      id: jib
      run: |
        # Construimos la imagen con Jib. Jib usa las credenciales de Docker que configuramos en el paso anterior.
        # El tag de la imagen será el hash del commit para asegurar que sea único.
        IMAGE_TAG=${{ github.sha }}
        mvn -f product/pom.xml compile jib:build -Dimage=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_REPO }}:$IMAGE_TAG
        
        # Guardamos el nombre completo de la imagen para usarlo en pasos posteriores
        echo "image=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_REPO }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download existing ECS Task Definition
      id: download-task-def
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_NAME }} --query taskDefinition > task-definition.json
        if [ $? -ne 0 ]; then
          echo "Failed to download task definition. Make sure it exists in AWS ECS."
          exit 1
        fi

    - name: Create new Task Definition with updated image
      id: render-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.jib.outputs.image }}

    - name: Deploy new Task Definition to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_NAME }}
        cluster: ${{ env.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true
