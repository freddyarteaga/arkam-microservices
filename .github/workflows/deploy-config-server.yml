name: Deploy Config Server to AWS with Jib

on:
  push:
    branches:
      - main
    paths:
      - 'configserver/**' # Se activa solo con cambios en la carpeta configserver
  workflow_dispatch: # Permite ejecutarlo manualmente

env:
  AWS_REGION: us-east-1 # Cambia esto a tu región de AWS
  ECS_CLUSTER_NAME: arkam-cluster
  ECS_SERVICE_NAME: config-server-svc # <-- CAMBIO
  ECS_TASK_DEFINITION_NAME: config-server-task # <-- CAMBIO
  CONTAINER_NAME: config-server-container # <-- CAMBIO
  IMAGE_REPO: config-server # <-- CAMBIO

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and Push Docker Image with Jib
      id: jib
      run: |
        IMAGE_TAG=${{ github.sha }}
        # Apuntamos al pom.xml del configserver
        mvn -f configserver/pom.xml compile jib:build -Dimage=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_REPO }}:$IMAGE_TAG
        
        echo "image=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_REPO }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download existing ECS Task Definition
      id: download-task-def
      run: |
        # Descargamos la task definition si existe, si no, el paso falla y sabemos que hay que crearla
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_NAME }} --query taskDefinition > task-definition.json || exit 0

    - name: Clean task definition file
      if: steps.download-task-def.outputs.exit_code != '1' # Solo si el archivo se descargó
      run: |
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .tags, .enableFaultInjection) | .' task-definition.json > cleaned-task-definition.json

    - name: Create new Task Definition with updated image
      id: render-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: cleaned-task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.jib.outputs.image }}

    - name: Deploy new Task Definition to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_NAME }}
        cluster: ${{ env.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true
